[{"C:\\MyStuff\\GDF-HRMS-Project\\GDF-HRMS\\front-end\\gdf-hrms\\src\\index.js":"1","C:\\MyStuff\\GDF-HRMS-Project\\GDF-HRMS\\front-end\\gdf-hrms\\src\\App.js":"2","C:\\MyStuff\\GDF-HRMS-Project\\GDF-HRMS\\front-end\\gdf-hrms\\src\\Api.js":"3","C:\\MyStuff\\GDF-HRMS-Project\\GDF-HRMS\\front-end\\gdf-hrms\\src\\Layout.js":"4","C:\\MyStuff\\GDF-HRMS-Project\\GDF-HRMS\\front-end\\gdf-hrms\\src\\searchpage.js":"5"},{"size":431,"mtime":1612747996924,"results":"6","hashOfConfig":"7"},{"size":549,"mtime":1612793867146,"results":"8","hashOfConfig":"7"},{"size":1448,"mtime":1612750011231,"results":"9","hashOfConfig":"7"},{"size":5568,"mtime":1612805407323,"results":"10","hashOfConfig":"7"},{"size":2553,"mtime":1612829581530,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"jschfz",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"14"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\MyStuff\\GDF-HRMS-Project\\GDF-HRMS\\front-end\\gdf-hrms\\src\\index.js",[],["25","26"],"C:\\MyStuff\\GDF-HRMS-Project\\GDF-HRMS\\front-end\\gdf-hrms\\src\\App.js",[],"C:\\MyStuff\\GDF-HRMS-Project\\GDF-HRMS\\front-end\\gdf-hrms\\src\\Api.js",["27"],"import React, { useState } from \"react\";\r\nimport Axios from 'axios'; // remember to npm install Axios\r\n//import { AddBoxOutlined } from \"@material-ui/icons\";\r\n//import { useState } from 'react';\r\n//import { useEffect } from 'react';\r\n\r\nfunction Api() { \r\n\r\n    const [employee, setEmployee] = useState(\"\")\r\n\r\n    //const getJoke = () => {\r\n     //   Axios.get(\"https://official-joke-api.appspot.com/random_joke\").then((response) => {\r\n            //console.log(response);\r\n     //       setJoke(response.data.setup + \"...\" + response.data.punchline);\r\n     //   })\r\n   // }\r\n    \r\n\r\n   //calling endpoints \r\n    const getEmployeeByRegNumber = (RNumber) => {\r\n        Axios.get(\"https://localhost:44353/api/EmployeeInfo/regnumber/\" + RNumber).then((response) => {\r\n            //console.log(response);\r\n            setEmployee(response.data.Title + \"...\" + response.data.Fname);\r\n            // which ever field you need it will be response.data.fieldName\r\n        })\r\n    }\r\n\r\n    const getEmployeeByFirstName = (Fname) => {\r\n        Axios.get(\"https://localhost:44353/api/EmployeeInfo/fname/\" + Fname).then((response) => {\r\n            //console.log(response);\r\n            setEmployee(response.data.Title + \"...\" + response.data.Fname);\r\n        })\r\n    }\r\n\r\n\r\n\r\nreturn (\r\n    \r\n<div>Hello api area <button onClick={() => getEmployeeByRegNumber(12345)}>Get employee by regNumber</button>\r\n\r\n{employee }\r\n</div>\r\n\r\n);\r\n  }\r\n\r\n  export default Api;","C:\\MyStuff\\GDF-HRMS-Project\\GDF-HRMS\\front-end\\gdf-hrms\\src\\Layout.js",["28","29"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Hidden from '@material-ui/core/Hidden';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n//import FileCopy from '@material-ui/icons/FileCopy';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\n//import SearchIcon from '@material-ui/icons/Search';\r\nimport gdfLogo from './gdfLogo.png';\r\nimport { HourglassEmptyTwoTone, PersonAddRounded } from '@material-ui/icons';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst hrmsHeader = {\r\n  color: 'black',\r\n}\r\n\r\nconst gdfStyle = {\r\n  color: 'green'\r\n}\r\n\r\nconst gdfLogoStyle = {\r\n  width: drawerWidth,\r\n  paddingTop: '0px',\r\n  height: AppBar.height,\r\n  marginBottom: '0px'\r\n}\r\n\r\nconst iconMargin = {\r\n  float: 'left',\r\n  marginRight: '20px'\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  drawer: {\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: drawerWidth,\r\n      flexShrink: 0,\r\n    },\r\n  },\r\n  appBar: {\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: `calc(100% - ${drawerWidth}px)`,\r\n      marginLeft: drawerWidth,\r\n    },\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'none',\r\n    },\r\n  },\r\n  // necessary for content to be below app bar\r\n  toolbar: theme.mixins.toolbar,\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nfunction ResponsiveDrawer(props) {\r\n  const { window } = props;\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [mobileOpen, setMobileOpen] = React.useState(false);\r\n\r\n  const handleDrawerToggle = () => {\r\n    setMobileOpen(!mobileOpen);\r\n  };\r\n\r\n  const drawer = (\r\n    <div>\r\n      <img src={gdfLogo} alt=\"Logo\" style = {gdfLogoStyle} />;\r\n      <div className={classes.toolbar} />\r\n      {/*<Divider />*/}\r\n      <List>        \r\n        <ListItem button><Link to=\"/add-employee\"><ListItemText primary='Add Employee'/></Link></ListItem>\r\n        <ListItem button><Link to=\"/employee-history\"><ListItemText primary='Employee History'/></Link></ListItem>\r\n        <ListItem button><Link to=\"/search-page\"><ListItemText primary='Employee Search'/></Link></ListItem>\r\n        <ListItem button><Link to=\"/something\"><ListItemText primary='Something'/></Link></ListItem>\r\n      </List>\r\n      <Divider />\r\n      <List>\r\n        {['Something Else', 'More', 'Something More'].map((text, index) => (\r\n          <ListItem button key={text}>\r\n            <ListItemIcon>{index % 2 === 0 ? <HourglassEmptyTwoTone /> : <MailIcon />}</ListItemIcon>\r\n            <ListItemText primary={text} />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </div>\r\n  );\r\n\r\n  const container = window !== undefined ? () => window().document.body : undefined;\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar position=\"fixed\" className={classes.appBar} color='white'>\r\n        <Toolbar>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            edge=\"start\"\r\n            onClick={handleDrawerToggle}\r\n            className={classes.menuButton}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography>\r\n            <Typography variant=\"h4\" noWrap style={gdfStyle}>GUYANA DEFENCE FORCE</Typography>\r\n            <Typography variant=\"h5\" style = {hrmsHeader} noWrap>Human Resources Management System</Typography>\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <nav className={classes.drawer} aria-label=\"mailbox folders\">\r\n        {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\r\n        <Hidden smUp implementation=\"css\">\r\n          <Drawer\r\n            container={container}\r\n            variant=\"temporary\"\r\n            anchor={theme.direction === 'rtl' ? 'right' : 'left'}\r\n            open={mobileOpen}\r\n            onClose={handleDrawerToggle}\r\n            classes={{\r\n              paper: classes.drawerPaper,\r\n            }}\r\n            ModalProps={{\r\n              keepMounted: true, // Better open performance on mobile.\r\n            }}\r\n          >\r\n            {drawer}\r\n          </Drawer>\r\n        </Hidden>\r\n        <Hidden xsDown implementation=\"css\">\r\n          <Drawer\r\n            classes={{\r\n              paper: classes.drawerPaper,\r\n            }}\r\n            variant=\"permanent\"\r\n            open\r\n          >\r\n            {drawer}\r\n          </Drawer>\r\n        </Hidden>\r\n      </nav>\r\n      <main className={classes.content}>\r\n        <div className={classes.toolbar} />\r\n        {props.children}        \r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nResponsiveDrawer.propTypes = {\r\n  /**\r\n   * Injected by the documentation to work in an iframe.\r\n   * You won't need it on your project.\r\n   */\r\n  window: PropTypes.func,\r\n};\r\n\r\nexport default ResponsiveDrawer;\r\n","C:\\MyStuff\\GDF-HRMS-Project\\GDF-HRMS\\front-end\\gdf-hrms\\src\\searchpage.js",["30","31"],{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":28,"column":11,"nodeType":"38","messageId":"39","endLine":28,"endColumn":33},{"ruleId":"36","severity":1,"message":"40","line":21,"column":33,"nodeType":"38","messageId":"39","endLine":21,"endColumn":49},{"ruleId":"36","severity":1,"message":"41","line":41,"column":7,"nodeType":"38","messageId":"39","endLine":41,"endColumn":17},{"ruleId":"36","severity":1,"message":"42","line":9,"column":9,"nodeType":"38","messageId":"39","endLine":9,"endColumn":16},{"ruleId":"43","severity":1,"message":"44","line":32,"column":3,"nodeType":"45","messageId":"46","endLine":32,"endColumn":60},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"no-unused-vars","'getEmployeeByFirstName' is assigned a value but never used.","Identifier","unusedVar","'PersonAddRounded' is defined but never used.","'iconMargin' is assigned a value but never used.","'useForm' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-global-assign","no-unsafe-negation"]